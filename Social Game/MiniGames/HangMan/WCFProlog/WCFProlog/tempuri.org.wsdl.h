
// File generated by Wsutil Compiler version 1.0095 
// This file defines C/C++ functions, callbacks, types that correspond to operations,
// and types specified in WSDL and XSD files processed by Wsutil compiler. The generated 
// type definitions, function and callback declarations can be used with various 
// Web Services APIs either in applications that send and receive requests to and 
// from a running web service, or in the implementation of web services, or in both. 
//
// If Wsutil has generated this file from a WSDL file, the file may contain up to three 
// sets of C/C++ definitions. The first set consists of function declarations that can be 
// used in calling operations on a running web service from client applications. 
// The second set consists of callback declarations that can be used in the 
// implementation of web services.  
// The third set contains definitions C/C++ structures that are used for serialization of 
// C/C++ types to Schema types defined in the WSDL file.
//
// The set of function declarations for web services clients may contain the 
// following declaration: 
//
//    HRESULT WINAPI DefaultBinding_ICalculator_Add(
//       _In_ WS_SERVICE_PROXY* _serviceProxy,
//       _In_ int a, 
//       _In_ int b, 
//       _Out_ int* result, 
//       _In_ WS_HEAP* _heap,
//       _In_opt_ WS_CALL_PROPERTY* _callProperties,
//       _In_ const ULONG _callPropertyCount,
//       _In_opt_ const WS_ASYNC_CONTEXT*_asyncContext,
//       _In_opt_ WS_ERROR* _error);
//
// This function can be called from an application code to request ICalculator web 
// service to perform operation Add using two integers a and b as input data.
// Once the web service processes this request and sends the result back,
// the result is returned to the caller of this function in the "result" parameter.
// A WS_SERVICE_PROXY must be created using WsCreateServiceProxy() function
// before this proxy function can be invoked.
//
// The set of callbacks for implementation of web services may contain the following 
// definition of a callback: 
//
//    typedef HRESULT (CALLBACK* DefaultBinding_ICalculator_AddCallback) (
//       _In_ const WS_OPERATION_CONTEXT* _context,
//       _In_ int a, 
//       _In_ int b, 
//       _Out_ int* result, 
//       _In_ const WS_ASYNC_CONTEXT* _asyncContext,
//       _In_ WS_ERROR* _error); 
//
//    typedef struct DefaultBinding_ICalculatorFunctionTable 
//    {
//         DefaultBinding_ICalculator_AddCallback DefaultBinding_ICalculator_Add;
//    } DefaultBinding_ICalculatorFunctionTable;
//
// This definition can be used to implement a function that defines the Add operation 
// as a part of an ICalculator web service. Once this callback is implemented and 
// the web service is deployed and running, if a client applications attempts to 
// execute the operation Add, the implementation of this callback is called and 
// it receives two integers a and b as input data and it returns a third integer 
// that is the result of the operation. A WS_SERVICE_ENDPOINT must be filled out, 
// and its contract field set to instance of such a function table.  
// WsCreateServiceHost may then be used to register the endpoint as a service.
// 
// The set with definitions of C/C++ structures may contain a definition of the following 
// structure:
//    typedef struct ContactInfo 
//    {
//			WCHAR*  name;
//			WCHAR*  email;
//			__int64 contactID;
//	  } ContactInfo;
//
// This structure corresponds to the following complex type defined in the WSDL file:
//    <s:complexType name="ContactInfo">
//      <s:sequence>
//        <s:element minOccurs="1" maxOccurs="1" name="name" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="email" type="s:string" />
//        <s:element minOccurs="1" maxOccurs="1" name="contactID" type="s:long" />
//      </s:sequence>
//    </s:complexType>
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
// If Wsutil generates this file from a WSDL file and policy processing is enabled using
// policy switch, the file may contain declaration of functions that can be used 
// for creating a proxy to a web service or an endpoint of a web service. 
// For example, the file may contain declaration of the following function:
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceProxy(
//    _In_ WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    _In_reads_opt_(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
//    _In_ const ULONG proxyPropertyCount,
//    _Outptr_ WS_SERVICE_PROXY** proxy,
//    _In_opt_ WS_ERROR* error);
//
// This function can be called from application code to create a service
// proxy object. A service proxy must be created before any request can be sent 
// to the web service.
//
// Also, the file may contain declaration of the following function:
//
//    HRESULT DefaultBinding_ICalculator_CreateServiceEndpoint(
//    _In_ WS_HTTP_SSL_BINDING_TEMPLATE* templateValue,
//    _In_opt_ WS_STRING address,
//    _In_opt_ struct DefaultBinding_ICalculatorFunctionTable* functionTable,
//    _In_opt_ WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
//    _In_reads_opt_(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
//    _In_ const ULONG endpointPropertyCount,
//    _In_ WS_HEAP* heap,
//    _Outptr_ WS_SERVICE_ENDPOINT** serviceEndpoint,
//    _In_opt_ WS_ERROR* error);
//
// This function can be used to create a Service Host object, which has to be 
// created before a web services starts receiving requests from its clients.
//
// For more information about content of this file, please see the documentation for
// Wsutil compiler.
#if _MSC_VER > 1000 
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif

// The following client functions were generated:

//     BasicHttpBinding_IService1_GetEveryWord
//     BasicHttpBinding_IService1_Add

// The following server function tables were generated:

//     struct BasicHttpBinding_IService1FunctionTable

// the following policy helpers were generated:

//  BasicHttpBinding_IService1_CreateServiceProxy;
//  BasicHttpBinding_IService1_CreateServiceEndpoint;

// The following header files must be included in this order before this one

// #include <WebServices.h>
// #include "SocialGameService.xsd.h"
// #include "tempuri.org.xsd.h"

////////////////////////////////////////////////
// Policy helper routines
////////////////////////////////////////////////

//  WS_CHANNEL_PROPERTY_ENCODING = WS_ENCODING_XML_UTF8,
//  WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = WS_ADDRESSING_VERSION_TRANSPORT,
//  WS_ENVELOPE_VERSION = WS_ENVELOPE_VERSION_SOAP_1_1,
// client channel type: WS_CHANNEL_TYPE_REQUEST, service endpoint channel type: WS_CHANNEL_TYPE_REPLY

HRESULT BasicHttpBinding_IService1_CreateServiceProxy(
    _In_opt_ WS_HTTP_BINDING_TEMPLATE* templateValue,
    _In_reads_opt_(proxyPropertyCount) const WS_PROXY_PROPERTY* proxyProperties,
    _In_ const ULONG proxyPropertyCount,
    _Outptr_ WS_SERVICE_PROXY** _serviceProxy,
    _In_opt_ WS_ERROR* error);

struct BasicHttpBinding_IService1FunctionTable;
HRESULT BasicHttpBinding_IService1_CreateServiceEndpoint(
    _In_opt_ WS_HTTP_BINDING_TEMPLATE* templateValue,
    _In_opt_ CONST WS_STRING* address,
    _In_opt_ struct BasicHttpBinding_IService1FunctionTable* functionTable,
    _In_opt_ WS_SERVICE_SECURITY_CALLBACK authorizationCallback,
    _In_reads_opt_(endpointPropertyCount) WS_SERVICE_ENDPOINT_PROPERTY* endpointProperties,
    _In_ const ULONG endpointPropertyCount,
    _In_ WS_HEAP* heap,
    _Outptr_ WS_SERVICE_ENDPOINT** serviceEndpoint,
    _In_opt_ WS_ERROR* error);

////////////////////////////////////////////////
// Client functions definitions
////////////////////////////////////////////////

// operation: BasicHttpBinding_IService1_GetEveryWord
HRESULT WINAPI BasicHttpBinding_IService1_GetEveryWord(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _Out_ unsigned int* GetEveryWordResultCount, 
    _Outptr_opt_result_buffer_(*GetEveryWordResultCount) Word** GetEveryWordResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

// operation: BasicHttpBinding_IService1_Add
HRESULT WINAPI BasicHttpBinding_IService1_Add(
    _In_ WS_SERVICE_PROXY* _serviceProxy,
    _In_ int x, 
    _In_ int y, 
    _Out_ int* AddResult, 
    _In_ WS_HEAP* _heap,
    _In_reads_opt_(_callPropertyCount) const WS_CALL_PROPERTY* _callProperties,
    _In_ const ULONG _callPropertyCount,
    _In_opt_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_opt_ WS_ERROR* _error);

////////////////////////////////////////////////
// Service functions definitions
////////////////////////////////////////////////

typedef HRESULT (CALLBACK* BasicHttpBinding_IService1_GetEveryWordCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _Out_ unsigned int* GetEveryWordResultCount, 
    _Outptr_opt_result_buffer_(*GetEveryWordResultCount) Word** GetEveryWordResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

typedef HRESULT (CALLBACK* BasicHttpBinding_IService1_AddCallback) (
    _In_ const WS_OPERATION_CONTEXT* _context,
    _In_ int x, 
    _In_ int y, 
    _Out_ int* AddResult, 
    _In_ const WS_ASYNC_CONTEXT* _asyncContext,
    _In_ WS_ERROR* _error);

// binding: BasicHttpBinding_IService1
typedef struct BasicHttpBinding_IService1FunctionTable 
{
    BasicHttpBinding_IService1_GetEveryWordCallback BasicHttpBinding_IService1_GetEveryWord;
    BasicHttpBinding_IService1_AddCallback BasicHttpBinding_IService1_Add;
} BasicHttpBinding_IService1FunctionTable;

////////////////////////////////////////////////
// Global web service descriptions.
////////////////////////////////////////////////

typedef struct _tempuri_org_wsdl
{
    struct // messages
    {
        // message: IService1_GetEveryWord_InputMessage
        // c type: _GetEveryWord
        // action: "http://tempuri.org/IService1/GetEveryWord"
        // messageDescription: tempuri_org_wsdl.messages.IService1_GetEveryWord_InputMessage
        WS_MESSAGE_DESCRIPTION IService1_GetEveryWord_InputMessage;
        
        // message: IService1_GetEveryWord_OutputMessage
        // c type: _GetEveryWordResponse
        // action: "http://tempuri.org/IService1/GetEveryWordResponse"
        // messageDescription: tempuri_org_wsdl.messages.IService1_GetEveryWord_OutputMessage
        WS_MESSAGE_DESCRIPTION IService1_GetEveryWord_OutputMessage;
        
        // message: IService1_Add_InputMessage
        // c type: _Add
        // action: "http://tempuri.org/IService1/Add"
        // messageDescription: tempuri_org_wsdl.messages.IService1_Add_InputMessage
        WS_MESSAGE_DESCRIPTION IService1_Add_InputMessage;
        
        // message: IService1_Add_OutputMessage
        // c type: _AddResponse
        // action: "http://tempuri.org/IService1/AddResponse"
        // messageDescription: tempuri_org_wsdl.messages.IService1_Add_OutputMessage
        WS_MESSAGE_DESCRIPTION IService1_Add_OutputMessage;
        
    } messages;
    struct // contracts
    {
        // binding: BasicHttpBinding_IService1
        // portType: IService1
        // operation: BasicHttpBinding_IService1_GetEveryWord
        //     input message: IService1_GetEveryWord_InputMessage
        //     output message: IService1_GetEveryWord_OutputMessage
        // operation: BasicHttpBinding_IService1_Add
        //     input message: IService1_Add_InputMessage
        //     output message: IService1_Add_OutputMessage
        // contractDescription: tempuri_org_wsdl.contracts.BasicHttpBinding_IService1
        WS_CONTRACT_DESCRIPTION BasicHttpBinding_IService1;
        
    } contracts;
    struct // policies
    {
        // policy for binding: BasicHttpBinding_IService1
        // port name: BasicHttpBinding_IService1, binding: BasicHttpBinding_IService1, namespace: http://tempuri.org/
        WS_HTTP_POLICY_DESCRIPTION BasicHttpBinding_IService1;
    } policies;
} _tempuri_org_wsdl;

extern const _tempuri_org_wsdl tempuri_org_wsdl;

#ifdef __cplusplus
}
#endif

